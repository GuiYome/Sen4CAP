[GENERAL_CONFIG]
CTNUM_FILTER =
orbit_list_filter = 
orbit_type_list_filter =

; The following section is temporarily kept only for processor code evolution reasons but should not be used anymore and will be removed.

[S1_input_data]
re_compile = (SEN4CAP_L2A_(S[0-9]{1,2})_V([0-9]{8})T([0-9]{6})_([0-9]{8})T([0-9]{6})_([VH]{2})_([0-9]{3})_([A-Z]{3,4})\.)

; The following section is temporarily kept only for processor code evolution reasons but should not be used anymore and will be removed.

[S2_input_data]
re_compile = (S2AGRI_L3B_([A-Z]{5,11})_A([0-9]{8})T([0-9]{6})_T([0-9]{2}[A-Z]{3})\.)

[S1_constants]
; for all countries
S1_time_interval = 6
SAR_spacing = 20
      ; meters
cohe_ENL = 100
      ;20*5
min_cohe_var = 0.024
      ; ML=2*8; s1_res=3.0*22.; s1_smp=2.3*17.4; cohe_var.cohe_var(0.2, ML*s1_smp/s1_res)
locAcqTimeASC = 18:00:00
locAcqTimeDESC = 06:00:00

[S2_constants]
; for all countries
S2_time_interval = 5
      ; meters
locAcqTime = 10:30:00

[S2_model]
; for all countries
apply_model = False
modelDir = model
NDVI_nomow_model_perc = 95.
sampling_days = 1.
minimum_parcels_th = 20
model_temporal_range_str = ('20190101 00:00:00', '20191231 23:59:59')
start_params = (0.05, 50., 0.05, 340.)
bounds = ([0.02, 0., 0.02, 180.], [1, 180., 1, 360.])

[S1_processing]
; for all countries
pol_types = VH
data_types = COHE
invalid_data = nan
saturate_sigma = True
pfa = 3.0e-7
stat_smpl_n = 5
non_overlap_interval_days = 28
    ; days
options_layer_burning = 'ALL_TOUCHED=False'
    ; list of gdal options comma separated
erode_pixels = 0


[S2_processing]

; NDVI

; Czech Rep
prod_type_list = SNDVI
sc_fact = 1000
corrupted_th = 0.1
invalid_data = -10000
decreasing_abs_th = 0.12
decreasing_rate_th = -0.000001
increasing_rate_th = 0.05
high_abs_th = 0.72
low_abs_th = 0.4

; Lithuania
; prod_type_list = SNDVI
; sc_fact = 1000
; corrupted_th = 0.1
; invalid_data = -10000
; decreasing_abs_th = 0.12
; decreasing_rate_th = -0.000001
; increasing_rate_th = 0.06
; high_abs_th = 0.75
; low_abs_th = 0.5


; Netherlands
; prod_type_list = SNDVI
; sc_fact = 1000
; corrupted_th = 0.1
; invalid_data = -10000
; decreasing_abs_th = 0.12
; decreasing_rate_th = -0.000001
; increasing_rate_th = 0.9
; high_abs_th = 0.75
; low_abs_th = 0.5

; Spain
; prod_type_list = SNDVI
; sc_fact = 1000
; corrupted_th = 0.1
; invalid_data = -10000
; decreasing_abs_th = 0.15
; decreasing_rate_th = -0.000001
; increasing_rate_th = 0.9
; high_abs_th = 0.75
; low_abs_th = 0.5

; Romania
; prod_type_list = SNDVI
; sc_fact = 1000
; corrupted_th = 0.1
; invalid_data = -10000
; decreasing_abs_th = 0.15
; decreasing_rate_th = -0.000001
; increasing_rate_th = 0.9
; high_abs_th = 0.75
; low_abs_th = 0.5

; Italy
; tbd

; Parameters currently not in use
; decreasing_rate = - [doy-1]
; LAI
;prod_type_list = SLAIMONO
;sc_fact = 1000
;corrupted_th = 0.1
;invalid_data = -10000
;decreasing_abs_th = 0.8
;decreasing_rate_th = -0.01
;; decreasing_rate_th [doy-1]
;
;prod_type_list = SFAPARMONO
;sc_fact = 1000
;corrupted_th = 0.1
;invalid_data = -10000
;decreasing_abs_th = 0.014
;decreasing_rate_th = -0.01
;; decreasing_rate_th [doy-1]
;
; other parameters
erode_pixels = 0
options_layer_burning = ['ALL_TOUCHED=False']
no_mowing_after_det = 60
non_overlap_interval_days = 28
stat_smpl_n = 0

[compliancy]


; Czech Rep
crop_codes = 315, 350, 3001, 40115
crop_time_intervals = ('01/04/2019', '31/07/2019'), ('01/04/2019', '31/07/2019'), ('01/04/2019', '31/07/2019'), ('01/04/2019', '31/07/2019')
crop_rule = 0, 0, 0, 0

; Lithuania
; crop_codes = GPZ, DGP, GPA, EPT, MNP, SPT, 5PT-2, MNS
; crop_time_intervals = ('01/04/2019', '31/07/2019'), ('01/04/2019', '31/07/2019'), ('01/04/2019', '31/07/2019'), ('01/05/2019', '30/10/2019'), ('01/07/2019', '01/10/2019'), ('15/07/2019', '15/10/2019'), ('15/07/2019', '01/03/2020'), ('01/08/2019', '01/10/2019')
; crop_rule = 0, 0, 0, 0, 0, 0, 0, 0

; Netherlands
; crop_codes = 265, 331, 336, 266, 332, 333, 334, 370, 372, 383, 1921, 3506, 3509, 3512, 3513, 3519, 3522, 3523, 3805, 3807, 3808
; crop_time_intervals
; crop_rule = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

; Spain
; crop_codes = 2, 85
; crop_time_intervals = ('01/04/2019', '31/10/2019'), ('01/04/2019', '31/10/2019')
;crop_rule = 0, 0

; Romania
; crop_codes = 450, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 660, 661, 662, 663, 671
; crop_time_intervals = ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019'), ('01/05/2019', '31/10/2019')
; crop_rule = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

; Italy
; crop_codes = tbd
; crop_time_intervals = tbd
; crop_rule = tbd

[validation]
fwd_tol_days = 3
      ; days
bkw_tol_days = 3
      ; days
validation_temporal_range_str = ('20190401 00:00:00', '20191030 23:59:59')

